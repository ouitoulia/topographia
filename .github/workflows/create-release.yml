name: "Build Release"

on:
  push:
    branches:
      - '*'

jobs:
  release:
    name: "Release"
    runs-on: "ubuntu-latest"
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: 1.x

      - name: Fixup git permissions
        # https://github.com/actions/checkout/issues/766
        shell: bash
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"              
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Get current date and commit message
        id: data
        run: |
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_ENV
          echo "datestamp=$(date +'%s')" >> $GITHUB_ENV
          echo "commit_message=$(git log -1 --pretty=%B)" >> $GITHUB_ENV

      - name: Check release tag in commit message
        run: |
          COMMIT_MESSAGE="${{ env.commit_message }}"
          if [[ $COMMIT_MESSAGE == release* ]]; then
            TAG=$(echo "$COMMIT_MESSAGE" | grep -o -P '\(.*?\)' | tr -d '()')
            MESSAGE=$(echo "$COMMIT_MESSAGE" | sed -n -e 's/^release(.*):\(.*\)$/\1/p')
            if [ -n "$TAG" ] && [ -n "$MESSAGE" ]; then
              echo "Release tag found: $TAG"
          
              git branch # debug
              git checkout 1.x
              git branch # debug
          
              echo -e "\n# Information added by Github Action packaging script on ${{ env.date }}" >> topographia.info.yml
              echo "version: '$TAG'" >> topographia.info.yml
              echo "project: 'topographia'" >> topographia.info.yml
              echo "datestamp: ${{ env.datestamp }}" >> topographia.info.yml
              echo "message: '$MESSAGE'" >> topographia.info.yml
          
              git add topographia.info.yml
              git commit -m "Update version"
              git push origin
              git tag $TAG
              git push origin $TAG
            else
              echo "Invalid release tag format. Skipping the action."
            fi
          else
            echo "No valid release tag found in commit message. Skipping the action."
          fi

  create_release:
    name: "Create Release"
    runs-on: "ubuntu-latest"
    needs: release
    steps:
      - uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
